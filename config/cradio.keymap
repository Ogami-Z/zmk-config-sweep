// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <183>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <5 9 15 16 17 18 19 25 26 27 28 29 32 33 8 7 6>;
            flavor = "balanced";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <183>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <0 1 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            flavor = "hold-preferred";
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp P>, <&kp APOS>;

            tapping-term-ms = <183>;
        };

        ht1: ht1 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT1";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            require-prior-idle-ms = <0>;
            tapping-term-ms = <287>;
        };

        hmla: homerow_mods_a_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_A";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <219>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <5 9 15 16 17 18 19 25 26 27 28 29 32 33 8 7 6>;
            flavor = "tap-preferred";
        };

        hmrc: homerow_mods_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_CUSTOM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <205>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <0>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };

        hmls: homerow_mods_s_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_S_KEY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <209>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <5 9 15 16 17 18 19 25 26 27 28 29 32 33 8 7 6>;
            flavor = "tap-preferred";
        };

        ht2: ht2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT2";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <293>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <RIG LEF>;
            then-layer = <TRI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        focus_next_win {
            bindings = <&kp LG(TILDE)>;
            key-positions = <7 8>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <7 6>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <6 5>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        question_mark {
            bindings = <&kp QUESTION>;
            key-positions = <28 27>;
        };

        foward_slash {
            bindings = <&kp SLASH>;
            key-positions = <27 26>;
        };

        move_file {
            bindings = <&kp LG(LA(V))>;
            key-positions = <6 5 7>;
        };

        l_option_l_command {
            bindings = <&kp LA(LEFT_GUI)>;
            key-positions = <11 12>;
        };

        l_control_l_option {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <11 10>;
        };

        l_control_l_gui {
            bindings = <&kp LC(LEFT_GUI)>;
            key-positions = <10 12>;
        };

        l_control_l_shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <10 13>;
        };

        l_option_l_shift {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <11 13>;
        };

        l_command_l_shift {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <13 12>;
        };

        l_ctrl_opt_cmnd {
            bindings = <&kp LC(LA(LEFT_GUI))>;
            key-positions = <31 20>;
        };

        l_ctrl_cmnd_shift {
            bindings = <&kp LC(LG(LEFT_SHIFT))>;
            key-positions = <10 31>;
        };

        l_option_cmnd_shift {
            bindings = <&kp LG(LA(LEFT_SHIFT))>;
            key-positions = <31 0>;
        };

        r_option_r_command {
            bindings = <&kp RA(RIGHT_GUI)>;
            key-positions = <18 17>;
        };

        r_control_r_option {
            bindings = <&kp RC(RIGHT_ALT)>;
            key-positions = <19 18>;
        };

        r_control_r_gui {
            bindings = <&kp RC(RIGHT_GUI)>;
            key-positions = <19 17>;
        };

        r_control_r_shift {
            bindings = <&kp RC(RIGHT_SHIFT)>;
            key-positions = <19 16>;
        };

        r_option_r_shift {
            bindings = <&kp RA(RIGHT_SHIFT)>;
            key-positions = <18 16>;
        };

        r_command_r_shift {
            bindings = <&kp RG(RIGHT_SHIFT)>;
            key-positions = <17 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q          &kp W         &kp E                             &kp R          &kp T  &kp Y  &kp U          &kp I        &kp O        &kp P
&hmla LCTRL A  &hmls LALT S  &hml LGUI D                       &hml LSHIFT F  &kp G  &kp H  &hmr RSHIFT J  &hmr RGUI K  &hmr RALT L  &hmrc RCTRL ENTER
&kp Z          &kp X         &kp C                             &kp V          &kp B  &kp N  &kp M          &kp COMMA    &kp PERIOD   &kp BSPC
&kp SPACE      &lt 3 TAB     &ht2 LS(LA(LC(LEFT_GUI))) RSHIFT  &lt RIG ESC
            >;
        };

        windows_layer {
            bindings = <
&kp Q        &kp W       &kp E       &kp R        &kp T  &kp Y  &kp U        &kp I       &kp O       &ht APOS P
&kp A        &ht LALT S  &ht LGUI D  &ht LCTRL F  &kp G  &kp H  &ht RCTRL J  &ht RGUI K  &ht RALT L  &kp BSPC
&kp Z        &kp X       &kp C       &kp V        &kp B  &kp N  &kp M        &kp COMMA   &kp DOT     &kp ENTER
&lt LEF TAB  &kp LSHIFT  &kp SPACE   &lt RIG TAB
            >;
        };

        right_layer {
            bindings = <
&kp N1            &kp N2            &kp N3             &kp N4            &kp N5      &kp N6    &kp N7    &kp N8         &kp N9       &kp N0
&kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)   &kp LC(NUMBER_4)  &kp LC(N5)  &kp LEFT  &kp DOWN  &kp UP         &kp RIGHT    &ht RIGHT_BRACKET LEFT_BRACKET
&kp LC(NUMBER_6)  &kp LC(N7)        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp K_MUTE  &kp HOME  &kp END   &kp PAGE_DOWN  &kp PAGE_UP  &bootloader
&trans            &kp ESC           &trans             &trans
            >;
        };

        left_layer {
            bindings = <
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT        &kp CARET  &kp AMPS   &kp ASTRK  &kp GRAVE  &kp TILDE
&kp DQT   &kp LBKT  &kp LBRC  &kp LPAR  &default_report  &kp FSLH   &kp MINUS  &kp EQUAL  &kp COLON  &kp SEMI
&kp SQT   &kp RBKT  &kp RBRC  &kp RPAR  &bootloader      &kp BSLH   &kp UNDER  &kp PLUS   &kp PIPE   &kp QMARK
&trans    &trans    &trans    &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0  &bt BT_SEL 2  &out OUT_TOG   &tog WIN        &kp C_MUTE    &kp C_PREV
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1  &bt BT_SEL 3  &kp C_BRI_UP   &studio_unlock  &kp C_VOL_UP  &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR    &bt BT_SEL 4  &kp C_BRI_DEC  &trans          &kp C_VOL_DN  &kp C_NEXT
&trans  &trans   &trans   &trans
            >;
        };
    };
};
